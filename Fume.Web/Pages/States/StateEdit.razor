@page "/states/edit/{StateId:int}"
@inject IRepository repository
@inject NavigationManager navigationmanager
@inject SweetAlertService sweetalertservice


<h3>Editar Estado</h3>
@if (state is null)
{
    <p>Cargando...</p>

}
else
{
    <StatesForm @ref="statesForm" State="state" OnValidSubmit="EditAsync" ReturnAction="Return" />
   
}

@code {
    private State? state;
    private StatesForm? statesForm;

    [Parameter]
    public int StateId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<State>($"/api/states/{StateId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationmanager.NavigateTo("/countries/details");
                return;
            }
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetalertservice.FireAsync("ERROR!!", message, SweetAlertIcon.Error);
            return;

        }
        state = responseHttp.Response;
    }
    private async Task EditAsync()
    {
        var responseHttp = await repository.Put("/api/states", state);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetalertservice.FireAsync("Error", message, SweetAlertIcon.Error);
            return;

        }
        await sweetalertservice.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "Guardado Con Éxito",
                Icon = SweetAlertIcon.Success,
                ShowCancelButton = true,
            });

        Return ();
    }

    private void Return()
    {
        statesForm!.FormPostedSuccessfully = true;
        navigationmanager.NavigateTo($"/Countries/Details/{state!.CountryId}");
    }
}
